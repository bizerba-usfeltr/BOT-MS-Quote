<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Domain</name>
    </assembly>
    <members>
        <member name="T:Domain.Controllers.LineItemController">
            <summary>
            Controller containing the endpoints pertaining to line items
            </summary>
        </member>
        <member name="M:Domain.Controllers.LineItemController.#ctor(Infrastructure.Repos.IQuoteRepository,AutoMapper.IMapper)">
            <summary>
            Creates and instance of the Line item controller object
            </summary>
            <param name="quoteRepository">The repository used to persist quote information</param>
            <param name="mapper">The object that maps input/output data to model data</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Domain.Controllers.LineItemController.CreateLineItem(Domain.DTOs.LineItemInputDTO,System.Guid)">
            <summary>
            Creates a line item 
            </summary>
            <param name="item">details of the line item to save input by the user</param>
            <param name="quoteId">The id of the quote the line item will be added to</param>
            <returns></returns>
            <response code="201">Returns the created line item</response>
            <response code="409">The new line item would conflict with an existing one</response>
            <response code="422">The line item data has validator errors</response>
        </member>
        <member name="M:Domain.Controllers.LineItemController.GetLineItem(System.Guid,System.Guid)">
            <summary>
            Get a single line item
            </summary>
            <param name="quoteId">id of the quote the line items must be from</param>
            <param name="itemId">the id of the line item</param>
            <returns></returns>
            <response code="200">Returns the line item associated with the given line item id</response>
            <response code="404">A quote or line item with those Ids could not be found</response>
        </member>
        <member name="M:Domain.Controllers.LineItemController.GetLineItems(System.Guid)">
            <summary>
            Get all the line items that belong to the quote based on the quote id 
            </summary>
            <param name="quoteId">id of the quote the line items must be from</param>
            <returns></returns>
            <response code="200">Returns all the line item associated with the given quote id</response>
            <response code="404">A quote with that Id could not be found or has no line items</response>
        </member>
        <member name="M:Domain.Controllers.LineItemController.UpdateLineItem(Domain.DTOs.LineItemInputDTO,System.Guid,System.Guid)">
            <summary>
            Updates all fields of a line item if the line item id exists and creates an item with that id if it doesn't 
            </summary>
            <param name="itemInput">details of the line item to save input by the user</param>
            <param name="quoteId">The id of the quote the line item belongs to or will be added to</param>
            <param name="itemId">The id of the line item to be updated</param>
            <returns></returns>
            <response code="200">The update succeeded</response>
            <response code="201">A line item with that Id was not found for this quote so one was created</response>
            <response code="404">A quote with that Id could not be found</response>
            <response code="422">The supplied line item data has validator errors</response>
        </member>
        <member name="M:Domain.Controllers.LineItemController.DeleteLineItem(System.Guid,System.Guid)">
            <summary>
            Delete a line item from a quote. This is only allowed if the quote has more than one line item
            </summary>
            <param name="itemId">the id of the line item to delete</param>
            <param name="quoteId">the id of the quote the line item is being deleted from</param>
            <returns></returns>
            <response code="200">The delete succeeded</response>
            <response code="404">A quote or line item with those Ids could not be found</response>
            <response code="409">The line item could not be deleted because it is the only one</response>
        </member>
        <member name="T:Domain.Controllers.QuoteController">
            <summary>
            Controller containing endpoints pertaining to quotes
            </summary>
        </member>
        <member name="M:Domain.Controllers.QuoteController.#ctor(Infrastructure.Repos.IQuoteRepository,AutoMapper.IMapper)">
            <summary>
            Creates an instance of the Quote controller object
            </summary>
            <param name="quoteRepository">The repository used to persist quote information</param>
            <param name="mapper">The object that maps input/output data to model data</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Domain.Controllers.QuoteController.CreateQuote(Domain.DTOs.QuoteCreationDTO)">
            <summary>
            Creates a new quote
            </summary>
            <param name="quote">the user input quote fields creating a new quote</param>
            <returns>An output quote DTO </returns>
            <response code="201">Returns the created quote</response>
            <response code="409">The new quote would conflict with existing an existing</response>
            <response code="422">The supplied provided quote data has validator errors</response>
        </member>
        <member name="M:Domain.Controllers.QuoteController.GetQuote(System.Guid)">
            <summary>
            Get a single quote based on the id of the record in the db
            </summary>
            <param name="quoteId">id used as primary key of the quote to get</param>
            <returns>An action result with the output quote DTO in the response body</returns>
            <response code="200">Returns the quote associated with the given quote id</response>
            <response code="404">A quote with that Id could not be found</response>
        </member>
        <member name="M:Domain.Controllers.QuoteController.GetQuotes(Infrastructure.ResourceParameters.QuoteResourceParams)">
            <summary>
            Get a list of all quotes that match the search and filter parameters sent on the query string
            </summary>
            <param name="quoteResourceParams">string parameters to search and filter results by:
            QuoteNumber, QuotedBy, Type, SecondaryType, CustomerName, MOName </param>
            <returns>An action result with an IEnumerable of quotes that match the search and filter parameters in the response body</returns>
            <response code="200">Returns the quote associated with the given quote id</response>
            <response code="404">A quote with that met the query parameters could not be found</response>
        </member>
        <member name="M:Domain.Controllers.QuoteController.UpdateQuote(Domain.DTOs.QuoteUpdateDTO,System.Guid)">
            <summary>
            Updates all fields of a quote. Any fields that have not been given a value will be assigned its default value.
            If the id of the quote doesn't exist, a quote with that id and the input values will be created 
            </summary>
            <param name="quoteInput">the user input quote fields updating an existing quote</param>
            <param name="quoteId">the id of the quote to be updated</param>
            <returns></returns>
            <response code="200">The update succeeded</response>
            <response code="201">A quote with that Id was not found so one was created</response>
            <response code="422">The supplied quote data has validator errors</response>
        </member>
        <member name="M:Domain.Controllers.QuoteController.UpdateQuote(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{Domain.DTOs.QuoteInputDTO},System.Guid)">
            <summary>
            Updates the fields of the quote present in the patch document. Fields not in the document will not be changed
            </summary>
            <param name="quoteInput">Patch document with the user input quote fields to be updated on an existing quote</param>
            <param name="quoteId">The id of the quote to be updated</param>
            <returns></returns>
            <response code="204">The update succeeded</response>
            <response code="404">A quote with that quote id could not be found</response>
            <response code="422">The supplied quote data has validator errors</response>
        </member>
        <member name="P:Domain.DTOs.AuditOutputDTO.EditorName">
            <summary>
            The name of the person that made the changes
            </summary>
        </member>
        <member name="P:Domain.DTOs.AuditOutputDTO.EditDate">
            <summary>
            When the changes were made on
            </summary>
        </member>
        <member name="P:Domain.DTOs.AuditOutputDTO.Changes">
            <summary>
            What changes were made: field, old value and new value
            </summary>
        </member>
        <member name="T:Domain.DTOs.ChangesOutputDTO">
            <summary>
            A record of changes to a field
            </summary>
        </member>
        <member name="P:Domain.DTOs.ChangesOutputDTO.FieldName">
            <summary>
            The name of the field that was changed
            </summary>
        </member>
        <member name="P:Domain.DTOs.ChangesOutputDTO.OldValue">
            <summary>
            The old value before it was changed
            </summary>
        </member>
        <member name="P:Domain.DTOs.ChangesOutputDTO.NewValue">
            <summary>
            The new value after the change was saved
            </summary>
        </member>
        <member name="T:Domain.DTOs.InputCustomerDTO">
            <summary>
            Customer fields that can be manually input by the user
            </summary>
        </member>
        <member name="P:Domain.DTOs.InputCustomerDTO.CustomerName">
            <summary>
            Name of the customer organization
            </summary>
        </member>
        <member name="T:Domain.DTOs.LineItemInputDTO">
            <summary>
            Line Item object with only the fields a your would input
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemInputDTO.PartNumber">
            <summary>
            Identification number of the product 
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemInputDTO.Quantity">
            <summary>
            How many of the specific parts will be covered in a quote
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemInputDTO.ItemPrice">
            <summary>
            Total price of the line item. May be the same as the quote total if there it only one line item 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Domain.DTOs.LineItemInputDTO.ClassDesignation" -->
        <member name="T:Domain.DTOs.LineItemOutputDTO">
            <summary>
            The Line Item object used for display
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemOutputDTO.LineItemId">
            <summary>
            Id of the line item record in the db, used as unique identifier (pk,fk)
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemOutputDTO.LineNumber">
            <summary>
            The order the line item was added to the quote ie 1 for first, 2 for second ect
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemOutputDTO.PartNumber">
            <summary>
            Identification number of the product 
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemOutputDTO.Quantity">
            <summary>
            How many of the specific parts will be covered in a quote
            </summary>
        </member>
        <member name="P:Domain.DTOs.LineItemOutputDTO.ItemPrice">
            <summary>
            Total price of the line item. May be the same as the quote total if there it only one line item 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Domain.DTOs.LineItemOutputDTO.ClassDesignation" -->
        <member name="T:Domain.DTOs.QuoteInputDTO">
            <summary>
            Fields of the quote that may be manually input by user
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.QuoteNumber">
            <summary>
            The number used for identifying the quote by users.
            This number will be the same in the budget and the project
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.SalePersonName">
            <summary>
             Person who created the quote.
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.ContactName">
            <summary>
            Person qho created the quote and is the point of contact regarding the quote.
            May or may not be the pm on the project.
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.ContactEmail">
            <summary>
            The contact persons email address 
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.QuotePrimaryType">
            <summary>
            The type of job it is: Checkweigher, Industrial System, Labeling, Logistics, Marketing
            Metal Detector, Retail, Software, Vision, X-Ray
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.QuoteSecondaryType">
            <summary>
            Optional secondary type of job it is
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.Description">
            <summary>
            Description of the products and and work to be done covered by the quote
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.Conditions">
            <summary>
            Any disclaimers or conditions that stipulate the scope of the product and/or work covered in this quote 
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.LeadTime">
            <summary>
            An estimation of how long fulfilling this quote will take
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.QuoteTotal">
            <summary>
            Grand Total price of the Quote
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.ExtCustomerName">
            <summary>
            The external end customer ie Cargill Springdale
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.ExtCustomerLocation">
            <summary>
            The external end customers country and location
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.MOCustomerName">
            <summary>
            Material organization. the main customer for the quote ie Bizerba Germany
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.MOCustomerLocation">
            <summary>
            Material organizations country and location
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.QuoteExpiration">
            <summary>
            The date the quote is valid till, typically 90 days
            If a quote is pasted this data it can be recertified by the quoter or pm
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteInputDTO.LineItems">
            <summary>
            A summary of work and materials the quote covers.
            typically only one line item per quote but there can be more
            </summary>
        </member>
        <member name="M:Domain.DTOs.QuoteInputDTO.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines if the object is valid
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Domain.DTOs.QuoteOutputDTO">
            <summary>
            Quote fields to be displayed in the ui 
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuoteId">
            <summary>
            Id of the quote record in the db, used as unique identifier (pk,fk), not for display
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuoteNumber">
            <summary>
            The number used for identifying the quote by users.
            This number will be the same in the budget and the project
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuoteCreatedBy">
            <summary>
            Person who created the quote.
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.SalePersonName">
            <summary>
            Person in sales involved in the quote.
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.ContactName">
            <summary>
            Person who requested the quote and is the point of contact regarding the quote.
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.ContactEmail">
            <summary>
            The contact persons email address 
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuoteDate">
            <summary>
            Date the quote was created
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuoteExpiration">
            <summary>
            Date the quote is valid till, typically 90 days from creation or last update 
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuotePrimaryType">
            <summary>
            The type of job it is: Checkweigher, Industrial System, Labeling, Logistics, Marketing
            Metal Detector, Retail, Software, Vision, X-Ray
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuoteSecondaryType">
            <summary>
            Optional secondary type of job it is
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.Description">
            <summary>
            Description of the products and and work to be done covered by the quote
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.Conditions">
            <summary>
            Any disclaimers or conditions that stipulate the scope of the product and/or work covered in this quote 
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.LeadTime">
            <summary>
            An estimation of how long fulfilling this quote will take
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.QuoteTotal">
            <summary>
            Grand Total price of the Quote
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.ExtCustomerName">
            <summary>
            The external end customer ie Cargill
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.ExtCustomerLocation">
            <summary>
            Material organizations country and location
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.MOCustomerName">
            <summary>
            Material organization. the main customer for the quote ie Bizerba Germany
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.MOCustomerLocation">
            <summary>
            Material organizations country and location
            </summary>
        </member>
        <member name="P:Domain.DTOs.QuoteOutputDTO.LineItems">
            <summary>
            A summary of work and materials the quote covers.
            typically only one line item per quote but there can be more
            </summary>
        </member>
    </members>
</doc>
